services:
  # Servidor Apache principal
  apache-server:
    build:
      context: .
    container_name: apache-server
    ports:
      - "${APACHE_PORT:-9990}:80"
    volumes:
      - ./www/PwotoSite.cl/html:/var/www/PwotoSite.cl/html
      - ./www/PwotoSite.cl/log:/var/www/PwotoSite.cl/log
      - ./data/logs:/var/log/apache2
    networks:
      - dmz_network
    restart: unless-stopped

  # MySQL para DVWA
  mysql-dvwa:
    image: mysql:5.7
    container_name: mysql-dvwa
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-SecurePassword123!}
      - MYSQL_DATABASE=dvwa
      - MYSQL_USER=dvwa
      - MYSQL_PASSWORD=${DVWA_DB_PASSWORD:-DVWASecure456!}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - lan_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      retries: 10

  # DVWA - Damn Vulnerable Web Application
  dvwa:
    image: vulnerables/web-dvwa:latest
    container_name: dvwa
    ports:
      - "${DVWA_PORT:-9998}:80"
    depends_on:
      mysql-dvwa:
        condition: service_healthy
    environment:
      - DB_SERVER=mysql-dvwa
      - DB_DATABASE=dvwa
      - DB_USERNAME=dvwa
      - DB_PASSWORD=${DVWA_DB_PASSWORD:-DVWASecure456!}
    networks:
      - dmz_network
      - lan_network
    restart: unless-stopped

  # OWASP Juice Shop
  juice-shop:
    image: bkimminich/juice-shop:latest
    container_name: juice-shop
    ports:
      - "${JUICE_SHOP_PORT:-9997}:3000"
    networks:
      - dmz_network
    restart: unless-stopped

  # OWASP WebGoat
  webgoat:
    image: webgoat/webgoat:latest
    container_name: webgoat
    ports:
      - "${WEBGOAT_PORT:-9996}:8080"
    networks:
      - dmz_network
    restart: unless-stopped

  # OWASP Mutillidae
  mutillidae:
    image: citizenstig/nowasp:latest
    container_name: mutillidae
    ports:
      - "${MUTILLIDAE_PORT:-9995}:80"
    networks:
      - dmz_network
    restart: unless-stopped

  # Kali Linux optimizado para pentesting (OPTIMIZADO PARA VELOCIDAD)
  kali-attacker:
    build:
      context: .
      dockerfile: Dockerfile.kali
    container_name: kali-attacker
    network_mode: "host" # Usar red del host directamente para m√°ximo rendimiento
    tty: true
    stdin_open: true
    volumes:
      - ./data/uploads:/uploads
      - ./data/logs:/logs
    dns:
      - 1.1.1.1 # Cloudflare DNS primario
      - 1.0.0.1 # Cloudflare DNS secundario
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    restart: unless-stopped

networks:
  dmz_network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500 # Optimizar MTU
    ipam:
      config:
        - subnet: 172.18.1.0/24

  lan_network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.driver.mtu: 1500 # Optimizar MTU
    ipam:
      config:
        - subnet: 172.18.2.0/24

volumes:
  mysql_data:
    driver: local
